{"google":"","name":"Spark","body":"# Spark â€” A Classy Web Framework for Rapid Development\r\n\r\nSpark is a full stack framework built on top of [Silex][], made for\r\nRapid Development in the same spirit as Ruby on Rails.\r\n\r\nSpark is a framework for people who believe:\r\n\r\n* The structure of most applications are nearly the same.\r\n* Convention > Configuration\r\n* Asset management should be shipped out of the box.\r\n* ORMs solve 80% of problems.\r\n\r\nBuilding a framework is of course a _huge_ project, so there isn't\r\nnearly all done. This is what works for now:\r\n\r\n* Application generator.\r\n* Asset Pipeline based on [Pipe](http://github.com/CHH/pipe), with\r\n  deployment support.\r\n* Action Controllers with Action and View Helpers built on Traits, and\r\n  support for multiple templating strategies.\r\n* Basic framework for generators.\r\n* Extensible command line utility based on Symfony Console.\r\n\r\n[Silex]: http://silex.sensiolabs.org\r\n\r\n## Quick Start\r\n\r\n### Create an Application\r\n\r\nFirst get the `spark` executable:\r\n\r\n    % wget http://chh.github.com/spark/spark.phar\r\n\r\nThen invoke the `create` command and grab some coffee while Composer\r\ninstalls all dependencies:\r\n\r\n    % php spark.phar create MyApp\r\n\r\nGo into the application directory and start a development server:\r\n\r\n    % cd MyApp\r\n    % ./vendor/bin/spark server\r\n\r\nThen open <http://localhost:3000> in your browser, you should see \"Hello\r\nWorld\" in big letters.\r\n\r\n### Controllers\r\n\r\nControllers make your application do things when someone views it in\r\ntheir browser. Controllers go into the directory `app/controllers/`, \r\nand are best generated by the `generate controller` command:\r\n\r\n    % ./vendor/bin/spark generate controller user\r\n\r\nIf you open up `app/controllers/MyApp/UserController.php`\r\nyou should see this:\r\n\r\n```php\r\n<?php\r\n\r\nnamespace MyApp;\r\n\r\nclass UserController\r\n{\r\n    function indexAction()\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nEach controller consists of actions. Each action is a public method of\r\nthe controller class, and ends with \"Action\".\r\n\r\nThe HTML goes into a \"View\". The view's file name gets taken from the\r\ncontroller and action name. For example for the \"index\" action in the \r\n\"UserController\" the view \"user/index.phtml\" gets used.\r\n\r\nPut this into `app/views/user/index.phtml`:\r\n\r\n```html\r\n<h1>Hello World <?= $this->name ?>!</h1>\r\n```\r\n\r\nThe view has access to each property of the controller class. This\r\nallows you to pass variables from the controller to the view. Also add\r\nthe parameter `name` to the method, we will need it later.\r\n\r\n```php\r\n<?php\r\n\r\nnamespace MyApp;\r\n\r\nclass UserController\r\n{\r\n    function indexAction($name)\r\n    {\r\n        $this->name = $name;\r\n    }\r\n}\r\n```\r\n\r\nThe last part of getting our controller to do something (remotely)\r\nuseful, is to add a route. A Route connects a URI to a controller and\r\naction. Routes are configured in `config/routes.php`.\r\n\r\nThis will do for now:\r\n\r\n```php\r\n$routes->match('/user/{name}', 'user#index');\r\n```\r\n\r\nThat thing within the curly braces is a variable, which gets extracted\r\nfrom the URI and then gets assigned the name `name`. We've previously\r\ndeclared that our action needs an argument `name`, so Spark figures this\r\nout and passes the route variable along to the action.\r\n\r\nLast but not least, we assign the controller and action to the route.\r\nThis is done with `$controller#$action`. Controller names are converted\r\nfrom `under_score` to `UnderScore` and then suffixed with `Controller`.\r\nSo `user` gets transformed to `UserController`.\r\n\r\nIf you open <http://localhost:3000/user/John%20Doe> in your browser you\r\nshould see \"Hello World John Doe!\" in big letters.\r\n\r\n## License\r\n\r\nCopyright (c) 2012 Christoph Hochstrasser\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","tagline":"A classy web framework for Rapid Development","note":"Don't delete this file! It's used internally to help with page regeneration."}